{"version":3,"sources":["app/views/forms/FormValidation.jsx"],"names":["FormValidation","state","firstName","lastName","phone","username","city","cardNumber","password","repassword","zip","agree","checkbox1","checkbox2","radio","range","startDate","Date","endDate","date","setDate","getDate","handleSubmit","values","setSubmitting","console","log","routeSegments","name","path","className","initialValues","this","validationSchema","basicFormSchema","onSubmit","errors","touched","handleChange","handleBlur","isSubmitting","noValidate","classList","htmlFor","type","id","placeholder","value","onChange","onBlur","required","aria-describedby","length","checked","Component","yup","shape"],"mappings":"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","file":"static/js/115.72665561.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Breadcrumb } from \"@gull\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { classList } from \"@utils\";\n\nclass FormValidation extends Component {\n  state = {\n    firstName: \"\",\n    lastName: \"\",\n    phone: \"\",\n    username: \"\",\n    city: \"\",\n    cardNumber: \"4444444444444444\",\n    state: \"\",\n    password: \"\",\n    repassword: \"\",\n    zip: \"\",\n    agree: [], //returns ['on'] when on/checked\n    checkbox1: \"\",\n    checkbox2: \"\",\n    radio: \"\",\n    range: {\n      startDate: new Date(),\n      endDate: (() => {\n        let date = new Date();\n        date.setDate(date.getDate() + 7);\n        return date;\n      })(),\n    },\n  };\n\n  handleSubmit = (values, { setSubmitting }) => {\n    console.log(values);\n  };\n\n  render() {\n    return (\n      <div>\n        <Breadcrumb\n          routeSegments={[\n            { name: \"Forms\", path: \"/forms\" },\n            { name: \"Form Validation\" },\n          ]}\n        ></Breadcrumb>\n\n        <div className=\"row\">\n          <div className=\"col-md-8\">\n            <p>\n              For custom Bootstrap form validation messages, you’ll need to add\n              the <code>novalidate</code> boolean attribute to your\n              <code>form</code>. This disables the browser default feedback\n              tooltips, but still provides access to the form validation APIs in\n              JavaScript. Try to submit the form below; our JavaScript will\n              intercept the submit button and relay feedback to you. When\n              attempting to submit, you’ll see the <code>:invalid</code> and\n              <code>:valid</code> styles applied to your form controls.\n            </p>\n            <div className=\"card mb-4\">\n              <div className=\"card-body\">\n                <Formik\n                  initialValues={this.state}\n                  validationSchema={basicFormSchema}\n                  onSubmit={this.handleSubmit}\n                >\n                  {({\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    isSubmitting,\n                  }) => {\n                    return (\n                      <form\n                        className=\"needs-validation\"\n                        onSubmit={handleSubmit}\n                        noValidate\n                      >\n                        <div className=\"row\">\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\":\n                                !errors.firstName && touched.firstName,\n                              \"invalid-field\":\n                                errors.firstName && touched.firstName,\n                            })}\n                          >\n                            <label htmlFor=\"validationCustom202\">\n                              First name\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control\"\n                              id=\"validationCustom202\"\n                              placeholder=\"First name\"\n                              name=\"firstName\"\n                              value={values.firstName}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required\n                            />\n                            <div className=\"valid-feedback\">Looks good!</div>\n                            <div className=\"invalid-feedback\">\n                              First name is required\n                            </div>\n                          </div>\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\":\n                                touched.lastName && !errors.lastName,\n                              \"invalid-field\":\n                                touched.lastName && errors.lastName,\n                            })}\n                          >\n                            <label htmlFor=\"validationCustom222\">\n                              Last name\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control\"\n                              id=\"validationCustom222\"\n                              placeholder=\"Last name\"\n                              value={values.lastName}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              name=\"lastName\"\n                              required\n                            />\n                            <div className=\"valid-feedback\">Looks good!</div>\n                            <div className=\"invalid-feedback\">\n                              Last name is required\n                            </div>\n                          </div>\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\":\n                                touched.username && !errors.username,\n                              \"invalid-field\":\n                                touched.username && errors.username,\n                            })}\n                          >\n                            <label htmlFor=\"validationCustomUsername\">\n                              Username\n                            </label>\n                            <div className=\"input-group\">\n                              <div className=\"input-group-prepend\">\n                                <span\n                                  className=\"input-group-text\"\n                                  id=\"inputGroupPrepend\"\n                                >\n                                  @\n                                </span>\n                              </div>\n                              <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"validationCustomUsername\"\n                                placeholder=\"Username\"\n                                aria-describedby=\"inputGroupPrepend\"\n                                name=\"username\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.username}\n                                required\n                              />\n                              <div className=\"invalid-feedback\">\n                                Please choose a username.\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"row\">\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\": touched.city && !errors.city,\n                              \"invalid-field\": touched.city && errors.city,\n                            })}\n                          >\n                            <label htmlFor=\"validationCustom03\">City</label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control\"\n                              id=\"validationCustom03\"\n                              placeholder=\"City\"\n                              name=\"city\"\n                              value={values.city}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required\n                            />\n                            <div className=\"invalid-feedback\">\n                              Please provide a valid city.\n                            </div>\n                          </div>\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\": touched.state && !errors.state,\n                              \"invalid-field\": touched.state && errors.state,\n                            })}\n                          >\n                            <label htmlFor=\"validationCustom204\">State</label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control\"\n                              id=\"validationCustom204\"\n                              placeholder=\"State\"\n                              name=\"state\"\n                              value={values.state}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required\n                            />\n                            <div className=\"invalid-feedback\">\n                              Please provide a valid state.\n                            </div>\n                          </div>\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\": touched.zip && !errors.zip,\n                              \"invalid-field\": touched.zip && errors.zip,\n                            })}\n                          >\n                            <label htmlFor=\"validationCustom05\">Zip</label>\n                            <input\n                              type=\"number\"\n                              className=\"form-control\"\n                              id=\"validationCustom05\"\n                              placeholder=\"Zip\"\n                              name=\"zip\"\n                              value={values.zip}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required\n                            />\n                            <div className=\"invalid-feedback\">\n                              Please provide a valid zip.\n                            </div>\n                          </div>\n                        </div>\n                        <div\n                          className={classList({\n                            \"col-md-4 mb-3\": true,\n                            \"valid-field\":\n                              touched.agree &&\n                              !errors.agree &&\n                              values.agree.length,\n                            \"invalid-field\":\n                              touched.agree &&\n                              errors.agree &&\n                              !values.agree.length,\n                          })}\n                        >\n                          <label className=\"checkbox checkbox-primary\">\n                            <input\n                              type=\"checkbox\"\n                              name=\"agree\"\n                              value={values.agree}\n                              checked={values.agree.length}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required\n                            />\n                            <span>Agree to terms and conditions</span>\n                            <span className=\"checkmark\"></span>\n                          </label>\n\n                          <div className=\"invalid-feedback\">\n                            You must agree before submitting.\n                          </div>\n                        </div>\n                        <button className=\"btn btn-primary\" type=\"submit\">\n                          Submit form\n                        </button>\n                      </form>\n                    );\n                  }}\n                </Formik>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"col-md-8\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <div className=\"card-title\">Tooltip message</div>\n                <Formik\n                  initialValues={this.state}\n                  validationSchema={basicFormSchema}\n                  onSubmit={this.handleSubmit}\n                >\n                  {({\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    isSubmitting,\n                  }) => {\n                    return (\n                      <form\n                        className=\"needs-validation\"\n                        onSubmit={handleSubmit}\n                        noValidate\n                      >\n                        <div className=\"row\">\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\":\n                                !errors.firstName && touched.firstName,\n                              \"invalid-field\":\n                                errors.firstName && touched.firstName,\n                            })}\n                          >\n                            <label htmlFor=\"validationCustom01\">\n                              First name\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control\"\n                              id=\"validationCustom01\"\n                              placeholder=\"First name\"\n                              name=\"firstName\"\n                              value={values.firstName}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required\n                            />\n                            <div className=\"valid-tooltip\">Looks good!</div>\n                            <div className=\"invalid-tooltip\">\n                              First name is required\n                            </div>\n                          </div>\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\":\n                                touched.lastName && !errors.lastName,\n                              \"invalid-field\":\n                                touched.lastName && errors.lastName,\n                            })}\n                          >\n                            <label htmlFor=\"validationCustom02\">\n                              Last name\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control\"\n                              id=\"validationCustom02\"\n                              placeholder=\"Last name\"\n                              value={values.lastName}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              name=\"lastName\"\n                              required\n                            />\n                            <div className=\"valid-tooltip\">Looks good!</div>\n                            <div className=\"invalid-tooltip\">\n                              Last name is required\n                            </div>\n                          </div>\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\":\n                                touched.username && !errors.username,\n                              \"invalid-field\":\n                                touched.username && errors.username,\n                            })}\n                          >\n                            <label htmlFor=\"validationCustomUsername1\">\n                              Username\n                            </label>\n                            <div className=\"input-group\">\n                              <div className=\"input-group-prepend\">\n                                <span\n                                  className=\"input-group-text\"\n                                  id=\"inputGroupPrepend\"\n                                >\n                                  @\n                                </span>\n                              </div>\n                              <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"validationCustomUsername1\"\n                                placeholder=\"Username\"\n                                aria-describedby=\"inputGroupPrepend\"\n                                name=\"username\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.username}\n                                required\n                              />\n                              <div className=\"invalid-tooltip\">\n                                Please choose a username.\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"row\">\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\": touched.city && !errors.city,\n                              \"invalid-field\": touched.city && errors.city,\n                            })}\n                          >\n                            <label htmlFor=\"validationCustom203\">City</label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control\"\n                              id=\"validationCustom203\"\n                              placeholder=\"City\"\n                              name=\"city\"\n                              value={values.city}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required\n                            />\n                            <div className=\"invalid-tooltip\">\n                              Please provide a valid city.\n                            </div>\n                          </div>\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\": touched.state && !errors.state,\n                              \"invalid-field\": touched.state && errors.state,\n                            })}\n                          >\n                            <label htmlFor=\"validationCustom04\">State</label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control\"\n                              id=\"validationCustom04\"\n                              placeholder=\"State\"\n                              name=\"state\"\n                              value={values.state}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required\n                            />\n                            <div className=\"invalid-tooltip\">\n                              Please provide a valid state.\n                            </div>\n                          </div>\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\": touched.zip && !errors.zip,\n                              \"invalid-field\": touched.zip && errors.zip,\n                            })}\n                          >\n                            <label htmlFor=\"validationCustom205\">Zip</label>\n                            <input\n                              type=\"number\"\n                              className=\"form-control\"\n                              id=\"validationCustom205\"\n                              placeholder=\"Zip\"\n                              name=\"zip\"\n                              value={values.zip}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required\n                            />\n                            <div className=\"invalid-tooltip\">\n                              Please provide a valid zip.\n                            </div>\n                          </div>\n                        </div>\n                        <div\n                          className={classList({\n                            \"col-md-4 mb-3\": true,\n                            \"valid-field\":\n                              touched.agree &&\n                              !errors.agree &&\n                              values.agree.length,\n                            \"invalid-field\":\n                              touched.agree &&\n                              errors.agree &&\n                              !values.agree.length,\n                          })}\n                        >\n                          <label className=\"checkbox checkbox-primary\">\n                            <input\n                              type=\"checkbox\"\n                              name=\"agree\"\n                              value={values.agree}\n                              checked={values.agree.length}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required\n                            />\n                            <span>Agree to terms and conditions</span>\n                            <span className=\"checkmark\"></span>\n                          </label>\n\n                          <div className=\"invalid-tooltip\">\n                            You must agree before submitting.\n                          </div>\n                        </div>\n                        <button className=\"btn btn-primary\" type=\"submit\">\n                          Submit form\n                        </button>\n                      </form>\n                    );\n                  }}\n                </Formik>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst basicFormSchema = yup.object().shape({\n  firstName: yup.string().required(\"first name is required\"),\n  lastName: yup.string().required(\"last name is required\"),\n  username: yup.string().required(\"select any option\"),\n  city: yup.string().required(\"birthDay is required\"),\n  zip: yup.number().required(\"email is required\"),\n  agree: yup.string().required(\"Required\"),\n  state: yup.string().required(\"Required\"),\n});\n\nconst tooltipFormSchema = yup.object().shape({\n  firstName: yup.string().required(\"first name is required\"),\n  lastName: yup.string().required(\"last name is required\"),\n  username: yup.string().required(\"select any option\"),\n  city: yup.string().required(\"birthDay is required\"),\n  zip: yup.number().required(\"email is required\"),\n  agree: yup.string().required(\"Required\"),\n  state: yup.string().required(\"Required\"),\n});\n\nexport default FormValidation;\n"],"sourceRoot":""}