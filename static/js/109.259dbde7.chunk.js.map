{"version":3,"sources":["app/views/extra-kits/AppSweetAlert.jsx"],"names":["AppSweetAlert","state","basic1","basic2","success","error","warning","question","info","other1","other2","other3","toggleAlert","name","setState","closeAlert","this","routeSegments","path","lg","md","sm","xs","className","title","onClick","show","text","onConfirm","html","renderToStaticMarkup","variant","type","showCancelButton","console","log","onCancel","onClose","swal","fire","icon","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","result","value","imageUrl","imageWidth","imageHeight","imageAlt","timerInterval","timer","timerProgressBar","onBeforeOpen","showLoading","setInterval","getContent","querySelector","textContent","getTimerLeft","clearInterval","dismiss","DismissReason","input","inputAttributes","autocapitalize","showLoaderOnConfirm","preConfirm","login","fetch","response","ok","Error","statusText","json","catch","showValidationMessage","allowOutsideClick","isLoading","avatar_url","mixin","progressSteps","queue","answers","JSON","stringify","data","insertQueueStep","ip","position","footer","showClass","popup","hideClass","Component"],"mappings":"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","file":"static/js/109.259dbde7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { renderToStaticMarkup } from \"react-dom/server\";\nimport { Breadcrumb, SimpleCard } from \"@gull\";\nimport SweetAlert from \"sweetalert2-react\";\nimport swal from \"sweetalert2\";\nimport { Button, Row, Col } from \"react-bootstrap\";\n\nclass AppSweetAlert extends Component {\n  state = {\n    basic1: false,\n    basic2: false,\n    success: false,\n    error: false,\n    warning: false,\n    question: false,\n    info: false,\n    other1: false,\n    other2: false,\n    other3: false,\n  };\n\n  toggleAlert = (name) => {\n    this.setState({ [name]: !this.state[name] });\n  };\n\n  closeAlert = (name) => {\n    this.setState({ [name]: false });\n  };\n\n  render() {\n    let {\n      basic1,\n      basic2,\n      success,\n      error,\n      info,\n      warning,\n      question,\n      other1,\n      other2,\n      other3,\n    } = this.state;\n\n    return (\n      <div>\n        <Breadcrumb\n          routeSegments={[\n            { name: \"Home\", path: \"/\" },\n            { name: \"Extra Kits\", path: \"/extra-kits\" },\n            { name: \"Sweet Alert\" },\n          ]}\n        ></Breadcrumb>\n        <Row>\n          <Col lg={6} md={6} sm={6} xs={12} className=\"mb-4\">\n            <SimpleCard title=\"Basic Alert\" className=\"h-100\">\n              <Button\n                className=\"w-100 mb-2\"\n                onClick={() => this.toggleAlert(\"basic1\")}\n              >\n                Alert with title\n              </Button>\n              <SweetAlert\n                show={basic1}\n                title=\"Title\"\n                text=\"Here's a message!\"\n                onConfirm={() => this.toggleAlert(\"basic1\")}\n              />\n\n              <Button\n                className=\"w-100 mb-2\"\n                onClick={() => this.toggleAlert(\"basic2\")}\n              >\n                Alert with HTML\n              </Button>\n              <SweetAlert\n                show={basic2}\n                title=\"Demo\"\n                html={renderToStaticMarkup(<h1>Message from html</h1>)}\n                onConfirm={() => this.toggleAlert(\"basic2\")}\n              />\n            </SimpleCard>\n          </Col>\n\n          <Col lg={6} md={6} sm={6} xs={12} className=\"mb-4\">\n            <SimpleCard title=\"Alert Types\" className=\"h-100\">\n              <Button\n                className=\"w-100 mb-2\"\n                variant=\"success\"\n                onClick={() => this.toggleAlert(\"success\")}\n              >\n                Success\n              </Button>\n              <SweetAlert\n                show={success}\n                title=\"Alert Title\"\n                type=\"success\"\n                text=\"SweetAlert in React\"\n                onConfirm={() => this.toggleAlert(\"success\")}\n              />\n\n              <Button\n                className=\"w-100 mb-2\"\n                variant=\"info\"\n                onClick={() => this.toggleAlert(\"info\")}\n              >\n                info\n              </Button>\n              <SweetAlert\n                show={info}\n                title=\"Alert Title\"\n                type=\"info\"\n                text=\"SweetAlert in React\"\n                onConfirm={() => this.toggleAlert(\"info\")}\n              />\n\n              <Button\n                className=\"w-100 mb-2\"\n                variant=\"warning\"\n                onClick={() => this.toggleAlert(\"warning\")}\n              >\n                warning\n              </Button>\n              <SweetAlert\n                show={warning}\n                title=\"Alert Title\"\n                type=\"warning\"\n                text=\"SweetAlert in React\"\n                onConfirm={() => this.toggleAlert(\"warning\")}\n              />\n\n              <Button\n                className=\"w-100 mb-2\"\n                variant=\"danger\"\n                onClick={() => this.toggleAlert(\"error\")}\n              >\n                error\n              </Button>\n              <SweetAlert\n                show={error}\n                title=\"Alert Title\"\n                type=\"error\"\n                text=\"SweetAlert in React\"\n                onConfirm={() => this.toggleAlert(\"error\")}\n              />\n\n              <Button\n                className=\"w-100 mb-2\"\n                variant=\"success\"\n                onClick={() => this.toggleAlert(\"question\")}\n              >\n                question\n              </Button>\n              <SweetAlert\n                show={question}\n                title=\"Alert Title\"\n                type=\"question\"\n                text=\"SweetAlert in React\"\n                onConfirm={() => this.toggleAlert(\"question\")}\n              />\n            </SimpleCard>\n          </Col>\n\n          <Col lg={6} md={6} sm={6} xs={12} className=\"mb-4\">\n            <SimpleCard title=\"Other Options\" className=\"h-100\">\n              <Button\n                className=\"w-100 mb-2\"\n                onClick={() => this.toggleAlert(\"other1\")}\n              >\n                Alert with Cancel\n              </Button>\n              <SweetAlert\n                show={other1}\n                title=\"Title with Cancel\"\n                text=\"SweetAlert in React\"\n                showCancelButton\n                onConfirm={() => {\n                  console.log(\"confirm\");\n                  this.closeAlert(\"other1\");\n                }}\n                onCancel={() => {\n                  console.log(\"cancel\");\n                  this.closeAlert(\"other1\");\n                }}\n                onClose={() => this.closeAlert(\"other1\")}\n              />\n\n              <Button\n                className=\"w-100 mb-2\"\n                onClick={() => {\n                  swal\n                    .fire({\n                      title: \"Are you sure?\",\n                      text: \"You won't be able to revert this!\",\n                      icon: \"warning\",\n                      type: \"question\",\n                      showCancelButton: true,\n                      confirmButtonColor: \"#3085d6\",\n                      cancelButtonColor: \"#d33\",\n                      confirmButtonText: \"Yes, delete it!\",\n                      cancelButtonText: \"No\",\n                    })\n                    .then((result) => {\n                      if (result.value) {\n                        swal.fire(\n                          \"Deleted!\",\n                          \"Your file has been deleted.\",\n                          \"success\"\n                        );\n                      } else {\n                        swal.fire(\"Cancelled!\", \"Permission denied.\", \"error\");\n                      }\n                    });\n                }}\n              >\n                Confirm Dialog\n              </Button>\n\n              <Button\n                className=\"w-100 mb-2\"\n                onClick={() => {\n                  swal.fire({\n                    title: \"Sweet!\",\n                    text: \"Modal with a custom image.\",\n                    imageUrl: \"/assets/images/photo-wide-4.jpg\",\n                    imageWidth: 400,\n                    imageHeight: 200,\n                    imageAlt: \"Custom image\",\n                  });\n                }}\n              >\n                Alert with Custo Image\n              </Button>\n\n              <Button\n                className=\"w-100 mb-2\"\n                onClick={() => {\n                  let timerInterval;\n                  swal\n                    .fire({\n                      title: \"Auto close alert!\",\n                      html: \"I will close in <b></b> milliseconds.\",\n                      timer: 2000,\n                      timerProgressBar: true,\n                      onBeforeOpen: () => {\n                        swal.showLoading();\n                        timerInterval = setInterval(() => {\n                          swal.getContent().querySelector(\"b\").textContent =\n                            swal.getTimerLeft();\n                        }, 100);\n                      },\n                      onClose: () => {\n                        clearInterval(timerInterval);\n                      },\n                    })\n                    .then((result) => {\n                      if (\n                        /* Read more about handling dismissals below */\n                        result.dismiss === swal.DismissReason.timer\n                      ) {\n                        console.log(\"I was closed by the timer\"); // eslint-disable-line\n                      }\n                    });\n                }}\n              >\n                Self Closing Alert\n              </Button>\n            </SimpleCard>\n          </Col>\n\n          <Col lg={6} md={6} sm={6} xs={12} className=\"mb-4\">\n            <SimpleCard title=\"Special Alerts\" className=\"h-100\">\n              <Button\n                className=\"w-100 mb-2\"\n                onClick={() => {\n                  swal\n                    .fire({\n                      title: \"Submit your Github username\",\n                      input: \"text\",\n                      inputAttributes: {\n                        autocapitalize: \"off\",\n                      },\n                      showCancelButton: true,\n                      confirmButtonText: \"Look up\",\n                      showLoaderOnConfirm: true,\n                      preConfirm: (login) => {\n                        return fetch(`//api.github.com/users/${login}`)\n                          .then((response) => {\n                            if (!response.ok) {\n                              throw new Error(response.statusText);\n                            }\n                            return response.json();\n                          })\n                          .catch((error) => {\n                            swal.showValidationMessage(\n                              `Request failed: ${error}`\n                            );\n                          });\n                      },\n                      allowOutsideClick: () => !swal.isLoading(),\n                    })\n                    .then((result) => {\n                      if (result.value) {\n                        swal.fire({\n                          title: `${result.value.login}'s avatar`,\n                          imageUrl: result.value.avatar_url,\n                        });\n                      }\n                    });\n                }}\n              >\n                Alert with Server Request\n              </Button>\n\n              <Button\n                className=\"w-100 mb-2\"\n                onClick={() => {\n                  swal\n                    .mixin({\n                      input: \"text\",\n                      confirmButtonText: \"Next &rarr;\",\n                      showCancelButton: true,\n                      progressSteps: [\"1\", \"2\", \"3\"],\n                    })\n                    .queue([\n                      {\n                        title: \"Question 1\",\n                        text: \"Chaining swal2 modals is easy\",\n                      },\n                      \"Question 2\",\n                      \"Question 3\",\n                    ])\n                    .then((result) => {\n                      if (result.value) {\n                        const answers = JSON.stringify(result.value);\n                        swal.fire({\n                          title: \"All done!\",\n                          html: `\n          Your answers:\n          <pre><code>${answers}</code></pre>\n        `,\n                          confirmButtonText: \"Lovely!\",\n                        });\n                      }\n                    });\n                }}\n              >\n                Alert with Stepper\n              </Button>\n\n              <Button\n                className=\"w-100 mb-2\"\n                onClick={() => {\n                  const ipAPI = \"//api.ipify.org?format=json\";\n                  swal.queue([\n                    {\n                      title: \"Your public IP\",\n                      confirmButtonText: \"Show my public IP\",\n                      text:\n                        \"Your public IP will be received \" + \"via AJAX request\",\n                      showLoaderOnConfirm: true,\n                      preConfirm: () => {\n                        return fetch(ipAPI)\n                          .then((response) => response.json())\n                          .then((data) => swal.insertQueueStep(data.ip))\n                          .catch(() => {\n                            swal.insertQueueStep({\n                              icon: \"error\",\n                              title: \"Unable to get your public IP\",\n                            });\n                          });\n                      },\n                    },\n                  ]);\n                }}\n              >\n                Alert with Stepper\n              </Button>\n            </SimpleCard>\n          </Col>\n\n          <Col lg={6} md={6} sm={6} xs={12} className=\"mb-4\">\n            <SimpleCard title=\"Positioning with Animation\" className=\"h-100\">\n              <Button\n                className=\"w-100 mb-2\"\n                onClick={() => {\n                  const ipAPI = \"//api.ipify.org?format=json\";\n                  swal.fire({\n                    title: \"Custom Position\",\n                    confirmButtonText: \"Ok\",\n                    position: \"top-end\",\n                    icon: \"success\",\n                    text:\n                      \"Your public IP will be received \" + \"via AJAX request\",\n                    footer: `<a href=\"https://daneden.github.io/animate.css/\">positions?</a>`,\n                  });\n                }}\n              >\n                Alert with Positioning\n              </Button>\n\n              <Button\n                className=\"w-100 mb-2\"\n                onClick={() => {\n                  swal.fire({\n                    title: \"Custom animation with Animate.css\",\n                    showClass: {\n                      popup: \"animated fadeInDown  faster\",\n                    },\n                    hideClass: {\n                      popup: \"animated fadeOutUp  slower\",\n                    },\n                  });\n                }}\n              >\n                Alert with Animation\n              </Button>\n            </SimpleCard>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default AppSweetAlert;\n"],"sourceRoot":""}